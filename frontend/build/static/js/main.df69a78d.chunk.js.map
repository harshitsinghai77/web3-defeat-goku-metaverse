{"version":3,"sources":["App.jsx","index.jsx"],"names":["contractAddress","App","useState","currentAccount","setCurrentAccount","waveMessage","setWaveMessage","allWaves","setAllWaves","loading","setLoading","totalWave","setTotalWave","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWallet","alert","getCurrentTotalWave","provider","ethers","getDefaultProvider","wavePortalContract","Contract","contractABI","getTotalWaves","count","toNumber","getAllWaves","waves","wavesCleaned","forEach","wave","push","address","waver","timestamp","Date","message","useEffect","onNewWave","from","prevState","on","off","providers","Web3Provider","signer","getSigner","waveTxn","hash","wait","className","role","aria-label","href","target","rel","type","placeholder","style","height","width","padding","value","onChange","e","onClick","disabled","color","map","index","key","backgroundColor","marginTop","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df69a78d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport { ethers } from \"ethers\";\n\nimport contractABI from \"./artifacts/abi.json\";\nimport \"./App.css\";\n\nconst contractAddress = \"0x140519971Cc926577d5b50D0CFcb5d2Ee33BeD36\";\n\nexport default function App() {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [waveMessage, setWaveMessage] = useState();\n  const [allWaves, setAllWaves] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [totalWave, setTotalWave] = useState();\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getCurrentTotalWave = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = ethers.getDefaultProvider(\"rinkeby\");\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          provider\n        );\n\n        let count = await wavePortalContract.getTotalWaves();\n        setTotalWave(count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = ethers.getDefaultProvider(\"rinkeby\");\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          provider\n        );\n\n        const waves = await wavePortalContract.getAllWaves();\n        let wavesCleaned = [];\n        waves.forEach((wave) => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          });\n        });\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    getCurrentTotalWave();\n    getAllWaves();\n\n    let wavePortalContract;\n    const onNewWave = async (from, timestamp, message) => {\n      setAllWaves((prevState) => [\n        ...prevState,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message,\n        },\n      ]);\n      await getCurrentTotalWave();\n    };\n\n    if (window.ethereum) {\n      const provider = ethers.getDefaultProvider(\"rinkeby\");\n      wavePortalContract = new ethers.Contract(\n        contractAddress,\n        contractABI,\n        provider\n      );\n      wavePortalContract.on(\"NewWave\", onNewWave);\n    }\n\n    return () => {\n      if (wavePortalContract) {\n        wavePortalContract.off(\"NewWave\", onNewWave);\n      }\n    };\n  }, []);\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n\n        setLoading(true);\n        const waveTxn = await wavePortalContract.wave(waveMessage);\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined...\", waveTxn.hash);\n\n        await getCurrentTotalWave();\n        setLoading(false);\n        setWaveMessage(\"\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n        setLoading(false);\n      }\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          <span role=\"img\" aria-label=\"wave\">\n            ðŸ‘‹\n          </span>\n          Hey there!\n        </div>\n        <div className=\"bio\">\n          I am Harshit, Software Engineer currently based in India. Interested\n          in Data Engineering, MLOps and Web3. Connect your Ethereum wallet and\n          wave at me! You can find more about me{\" \"}\n          <a\n            href=\"https://fictionally-irrelevant.vercel.app/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            here.\n          </a>\n        </div>\n\n        <div className=\"container-center\">\n          <label>Say Hi</label>\n          <input\n            type=\"text\"\n            className=\"container-input\"\n            placeholder=\"Type a message\"\n            style={{ height: \"35px\", width: \"250px\", padding: \"0 15px\" }}\n            value={waveMessage}\n            onChange={(e) => setWaveMessage(e.target.value)}\n          />\n        </div>\n\n        <button\n          className=\"waveButton container-center\"\n          onClick={wave}\n          disabled={!waveMessage}\n        >\n          Wave at Me\n          {loading && (\n            <Loader\n              type=\"TailSpin\"\n              color=\"#00BFFF\"\n              height={20}\n              width={20}\n              style={{ padding: \"0px 12px\" }}\n            />\n          )}\n        </button>\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {totalWave > 0 && <div className=\"bio\">Total waves {totalWave}</div>}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div\n              key={index}\n              style={{\n                backgroundColor: \"OldLace\",\n                marginTop: \"16px\",\n                padding: \"8px\",\n              }}\n            >\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}